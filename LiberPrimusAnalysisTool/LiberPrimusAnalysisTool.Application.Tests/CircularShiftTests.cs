using LiberPrimusAnalysisTool.Application.Commands.Math;
using LiberPrimusAnalysisTool.Application.Commands.TextUtilies;
using LiberPrimusAnalysisTool.Entity.Numeric;
using LiberPrimusAnalysisTool.Utility.Character;

namespace LiberPrimusAnalysisTool.Application.Tests;

public class CircularShiftTests
{
    //Byte Tests
    [Fact]
    public async Task TestByteASCIILeft()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Left", IntBits.Byte, "ASCII");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestByteAMSILeft()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Left", IntBits.Byte, "ANSI");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestByteASCIIRight()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Right", IntBits.Byte, "ASCII");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestShortByteRight()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Right", IntBits.Byte, "ANSI");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    //Short Tests
    [Fact]
    public async Task TestShortASCIILeft()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Left", IntBits.Short, "ASCII");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestShortAMSILeft()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Left", IntBits.Short, "ANSI");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestShortASCIIRight()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Right", IntBits.Short, "ASCII");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestShortAMSIRight()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Right", IntBits.Short, "ANSI");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    //Int Tests
    [Fact]
    public async Task TestIntASCIILeft()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Left", IntBits.Int, "ASCII");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestIntAMSILeft()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Left", IntBits.Int, "ANSI");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestIntASCIIRight()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Right", IntBits.Int, "ASCII");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestIntAMSIRight()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Right", IntBits.Int, "ANSI");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    //Long Tests
    [Fact]
    public async Task TestLongASCIILeft()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Left", IntBits.Long, "ASCII");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestLongAMSILeft()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Left", IntBits.Long, "ANSI");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestLongASCIIRight()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Right", IntBits.Long, "ASCII");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
    [Fact]
    public async Task TestLongAMSIRight()
    {
        // Arrange
        var series = "101, 243, 211, 221, 48, 246, 191, 91, 174, 124, 206, 111, 123, 130, 91, 234," +
                            "60, 229, 7, 144, 179, 68, 157, 171, 182, 227, 86, 140, 203, 33, 70, 194," +
                            "185, 185, 98, 147, 155, 40, 66, 130, 168, 42, 14, 36, 243, 53, 227, 166," +
                            "126, 136, 23, 157, 171, 85, 206, 40, 127, 59, 73, 34, 181, 98, 62, 25," +
                            "189, 127, 140, 224, 99, 164, 212, 182, 82, 39, 230, 216, 185, 72, 23, 41," +
                            "71, 29, 100, 224, 214, 142, 55, 160, 233, 238, 99, 24, 246, 42, 28, 17," +
                            "239, 75, 36, 17, 41, 242, 144, 103, 61, 31, 143, 237, 7, 92, 16, 57, 164," +
                            "199, 226, 251, 155, 85, 145, 220, 21, 118, 171, 27, 6, 138, 81, 224, 228," +
                            "217, 171, 60, 84, 198, 164, 85, 133, 64, 244, 134, 250, 151, 80, 76, 62," +
                            "233, 46, 86, 251, 87, 76, 222, 243, 144, 135, 56, 26, 125, 252, 252, 116," +
                            "236, 224, 41, 52, 137, 125, 124, 120, 114, 127, 27, 74, 58, 232, 137, 117," +
                            "193, 211, 87, 200, 20, 83, 168, 192, 78, 9, 168, 147, 96, 85, 16, 128, 77," +
                            "207, 172, 216, 57, 180, 151, 183, 37, 104, 162, 97, 38, 63, 138, 156, 215," +
                            "131, 30, 163, 75, 125, 170, 71, 109, 202, 29, 157, 26, 25, 203, 162, 26," +
                            "36, 252, 200, 0, 58, 215, 181, 117, 98, 60, 247, 16, 64, 214, 200, 70, 149," +
                            "107, 11, 28, 99, 96, 56, 207, 86, 115, 90, 18, 94, 168";

        ICharacterRepo characterRepo = new CharacterRepo(); // Use the real implementation

        var circularHandler = new CircularShift.Handler(characterRepo);

        var command = new CircularShift.Command(series, 1, "Right", IntBits.Long, "ANSI");

        // Act
        var circularResult = await circularHandler.Handle(command, CancellationToken.None);

        Assert.NotNull(circularResult);
    }
    
}